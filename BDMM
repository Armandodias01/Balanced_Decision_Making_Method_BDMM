import pandas as pd
import numpy as np

# Given weights for P1 and P2
data = {
    'Criteria': ['C1', 'C2', 'C3', 'C4', 'C5', 'C6'],
    'P1': [0.18, 0.15, 0.3, 0.05, 0.12, 0.2],
    'P2': [0.2, 0.3, 0.2, 0.05, 0.125, 0.125]
}

# Convert to DataFrame
df_weights = pd.DataFrame(data)

# Step 1: Calculate the equal weights (mean of the total number of criteria)
n = len(df_weights['Criteria'])
equal_weights = [1 / n] * n

# Step 2: Calculate the distance of each productor's weight vector to the equal weights vector
df_weights['Equal_Weights'] = equal_weights

# Compute Euclidean distances for P1 and P2
df_weights['P1_Diff'] = (df_weights['P1'] - df_weights['Equal_Weights'])**2
df_weights['P2_Diff'] = (df_weights['P2'] - df_weights['Equal_Weights'])**2

distance_p1 = np.sqrt(df_weights['P1_Diff'].sum())
distance_p2 = np.sqrt(df_weights['P2_Diff'].sum())

# Normalize the distances to generate adjusted weights
total_distance = distance_p1 + distance_p2
normalized_p1 = distance_p1 / total_distance
normalized_p2 = distance_p2 / total_distance

# Final results
results = {
    'Metric': ['P1_Distance', 'P2_Distance', 'Normalized_P1', 'Normalized_P2'],
    'Value': [distance_p1, distance_p2, normalized_p1, normalized_p2]
}

results_df = pd.DataFrame(results)
results_df
